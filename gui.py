"""Project: brief description about project
    To fulfil the requirement of FIT Course by Pham@PTIT
    Cao Thi Thanh Nhan - B23DCCN618
"""

# =============================================
# GIAO DI·ªÜN NG∆Ø·ªúI D√ôNG CHO N√âN/GI·∫¢I N√âN HUFFMAN
# =============================================

import tkinter as tk  # D√πng Tkinter ƒë·ªÉ t·∫°o giao di·ªán GUI
from tkinter import filedialog, messagebox  # H·ªôp tho·∫°i ch·ªçn file v√† th√¥ng b√°o
from huffman import encode, decode, serialize_tree, deserialize_tree  # Thu·∫≠t to√°n Huffman
from utils import write_binary_file, read_binary_file  # X·ª≠ l√Ω ƒë·ªçc/ghi file nh·ªã ph√¢n
import os  # Thao t√°c v·ªõi file h·ªá th·ªëng

# =====================
# H√†m n√©n file ng∆∞·ªùi d√πng ch·ªçn
# =====================
def select_file_to_encode():
    """Hi·ªÉn th·ªã h·ªôp tho·∫°i ch·ªçn file ƒë·ªÉ n√©n v√† l∆∞u k·∫øt qu·∫£ d∆∞·ªõi d·∫°ng .huff."""
    filepath = filedialog.askopenfilename(title="Ch·ªçn file ƒë·ªÉ n√©n")
    if not filepath:
        return  # Ng∆∞·ªùi d√πng h·ªßy ch·ªçn

    with open(filepath, 'rb') as f:
        data = f.read()  # ƒê·ªçc n·ªôi dung file d∆∞·ªõi d·∫°ng byte (ch·∫ø ƒë·ªô nh·ªã ph√¢n)

    encoded, tree = encode(data)  # M√£ h√≥a d·ªØ li·ªáu b·∫±ng thu·∫≠t to√°n Huffman
    tree_bits = serialize_tree(tree)  # Tu·∫ßn t·ª± h√≥a c√¢y Huffman th√†nh chu·ªói bit

    separator = f'{ord("|"):08b}'  # D√πng '|' l√†m d·∫•u ph√¢n c√°ch (m√£ ASCII 124 ‚Üí '01111100')
    bit_string = tree_bits + separator + encoded  # Gh√©p c√¢y + ph√¢n c√°ch + d·ªØ li·ªáu

    output_path = filedialog.asksaveasfilename(
        defaultextension=".huff",
        filetypes=[("Huffman Files", "*.huff")]
    )
    if output_path:
        write_binary_file(output_path, bit_string)  # Ghi chu·ªói bit v√†o file n√©n
        ratio = (len(encoded) / (len(data) * 8)) * 100  # T√≠nh t·ª∑ l·ªá n√©n (%)
        messagebox.showinfo("Xong", f"N√©n th√†nh c√¥ng!\nT·ª∑ l·ªá n√©n: {ratio:.2f}%") # Hi·ªÉn th·ªã k·∫øt qu·∫£

# =====================
# H√†m gi·∫£i n√©n file .huff
# =====================
def select_file_to_decode():
    """Hi·ªÉn th·ªã h·ªôp tho·∫°i ch·ªçn file .huff ƒë·ªÉ gi·∫£i n√©n v√† l∆∞u k·∫øt qu·∫£."""
    filepath = filedialog.askopenfilename(
        title="Ch·ªçn file .huff ƒë·ªÉ gi·∫£i n√©n",
        filetypes=[("Huffman Files", "*.huff")]
    )
    if not filepath:
        return  # Ng∆∞·ªùi d√πng h·ªßy ch·ªçn

    bit_string = read_binary_file(filepath)  # ƒê·ªçc chu·ªói bit t·ª´ file n√©n

    try:
        sep = f'{ord("|"):08b}'  # D·∫•u ph√¢n c√°ch ('01111100')
        index = bit_string.index(sep)  # T√¨m v·ªã tr√≠ d·∫•u ph√¢n c√°ch

        tree_bits = bit_string[:index]  # Ph·∫ßn c√¢y Huffman
        encoded_data = bit_string[index + 8:]  # Ph·∫ßn d·ªØ li·ªáu m√£ h√≥a

        tree = deserialize_tree(tree_bits)  # Kh√¥i ph·ª•c c√¢y Huffman t·ª´ chu·ªói bit
        decoded_bytes = decode(encoded_data, tree)  # Gi·∫£i m√£ d·ªØ li·ªáu

        output_path = filedialog.asksaveasfilename(
            title="L∆∞u file gi·∫£i n√©n",
            defaultextension=".out",
            filetypes=[("All Files", "*.*")]
        )
        if output_path: #Cho ng∆∞·ªùi d√πng ch·ªçn n∆°i l∆∞u file sau khi gi·∫£i n√©n
            with open(output_path, 'wb') as f:
                f.write(decoded_bytes)
            messagebox.showinfo("Xong", "Gi·∫£i n√©n th√†nh c√¥ng!")

    except Exception as e:
        messagebox.showerror("L·ªói", f"Gi·∫£i m√£ th·∫•t b·∫°i: {str(e)}")

# =====================
# T·∫°o giao di·ªán ch√≠nh
# =====================
root = tk.Tk()
root.title("Huffman Codec - ·ª®ng d·ª•ng th·ª±c t·∫ø")

# Ti√™u ƒë·ªÅ v√† n√∫t ch·ª©c nƒÉng
tk.Label(root, text="Huffman Codec cho M·ªçi File", font=("Arial", 14)).pack(pady=10)
tk.Button(root, text="üîê N√©n file b·∫•t k·ª≥", command=select_file_to_encode, width=30).pack(pady=10)
tk.Button(root, text="üîì Gi·∫£i n√©n file .huff", command=select_file_to_decode, width=30).pack(pady=10)

# B·∫Øt ƒë·∫ßu v√≤ng l·∫∑p GUI
root.mainloop()

# =====================
# V√≠ d·ª• minh h·ªça
# =====================
# V·ªõi chu·ªói g·ªëc "ly thuyet thong tin"
# B1_T√≠nh ƒë·ªô d√†i g·ªëc: gi·∫£ s·ª≠ m·ªói k√≠ t·ª± d√πng 1 byte = 8 bit, v√† chu·ªói c√≥ 21 k√≠ t·ª±
#   -> 21 * 8 = 168 bit
# B2_T√≠nh ƒë·ªô d√†i sau khi m√£ h√≥a Huffman
#   S·ª≠ d·ª•ng b·∫£ng m√£ Huffman x√¢y d·ª±ng ƒë∆∞·ª£c ·ªü m·ª•c V√≠ d·ª• minh h√≥a t·ª´ file huffman.py, ta c√≥:
#   T·ªïng s·ªë bit sau khi m√£ h√≥a: 5 + 3 + 9 + 9 + 6 + 5 + 5 + 6 + 9 + 5 + 6 = 68 bit
# B3_T√≠nh t·ª∑ l·ªá n√©n
#   68 * 100% / 168 ‚âà 40,48%